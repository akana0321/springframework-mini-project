<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 인증이 필요없는 요청 경로 설정(정적이미지 - 로고 같은 것)
	<security:http pattern="/resources/**" security="none" /> -->

	<!-- 보안 필터 체인(어떤 필터를 쓸 것인지) 설정
	<security:http> -->
		<!-- Form 인증 방식 설정
			 1. 어떤 페이지를 대상으로 할 것인지 
			 2. username 파라미터 이름
			 3. password 파라미터 이름
			 4. spring security가 내부적으로 가진 이름
			 5. 로그인 성공시 어느 화면으로 갈 것인지
			 6. false를 주면 보려고 했던 페이지로 이동
			 7. 로그인 실패시 어디로 이동할지 url들은 다 요청경로(절대경로, 상대경로 그런 거 아님) -->
		<!-- <security:form-login
			login-page="/ch17/loginForm"
			username-parameter="mid" password-parameter="mpassword"
			login-processing-url="/login" default-target-url="/ch17/content"
			always-use-default-target="false"
			authentication-failure-url="/ch17/loginForm" />
		<security:form-login
			login-page="/ch17/loginForm"
			username-parameter="mid"
			password-parameter="mpassword"
			login-processing-url="/login"
			authentication-success-handler-ref="authenticationSuccessHandler"
         	authentication-failure-handler-ref="authenticationFailureHandler" /> -->

		<!-- 로그아웃 설정 1. 어떻게 요청하면 로그아웃이 되는지,
						   /logout은 spring security가 내부적으로 갖고있어 
			               로그아웃 요청을 이곳에 하게 됨
			            2. 로그아웃 했을 때 보여줄 페이지 -->
		<!-- <security:logout logout-url="/logout"
			logout-success-url="/ch17/content" />
		<security:logout logout-url="/logout"
			success-handler-ref="logoutSuccessHandler" /> -->

		<!-- 사이트 간 요청 위조 방지 비활성화(개발 시에 불편함)
		<security:csrf disabled="true" /> -->

		<!-- 요청 URL 권한 설정(설정하지 않으면 모든 페이지마다 로그인 요청)
			 1. 관리자 경로라면 관리자만 가능
			 2. 매니저라면 매니저만 가능
			 3. 유저라면 로그인 했다면 접근 가능 
			 4. 이외에 모든 것들은 아무나 접근 가능
		<security:intercept-url pattern="/ch17/admin*"
			access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url
			pattern="/ch17/manager*" access="hasRole('ROLE_MANAGER')" />
		<security:intercept-url pattern="/ch17/user*"
			access="isAuthenticated()" />
		<security:intercept-url pattern="/**"
			access="permitAll" /> -->

		<!-- 권한이 없을 경우 보여줄 페이지를 설정(권한이 없다는 것을 안내해줄 페이지)
			 1. error-page로 해당 페이지를 보여줌, 권한없음 코드는 403
		<security:access-denied-handler error-page="/ch17/error403" /> -->
			
		<!-- 로그인 중복 방지를 위한 설정
		<security:session-management> -->
			<!-- max-sessions: 최대 로그인 수 error-if-maximum-exceeded="true": 다른 곳에서 로그인을 
				할 수 없음 expired-url: 인증이 무료화된 사용자가 이동하는 페이지 -->
	
			<!-- 이전 로그인을 유효하게 만들기 -->
			<!-- <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/> -->
	
			<!-- 최종 로그인을 유효하게 만들기
			<security:concurrency-control
				max-sessions="1" error-if-maximum-exceeded="false"
				expired-url="/ch17/loginForm" />
		</security:session-management>
	</security:http> -->

	<!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) 사용자가 입력한 값과 DB와 비교해서 인증을 관리 
		1. 데이터를 DB에서 누가 가져와서 제공할 것인가(아래에 정의되어 있음)
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider" />
	</security:authentication-manager> -->

	<!-- <bean id="daoAuthenticationProvider"
			class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
			<property name="userDetailsService" ref="jdbcUserService" />
			<property name="authoritiesMapper"	ref="roleHierarchyAuthoritiesMapper" />
		</bean> -->

	<!-- 인증 제공자 설정 및 사용자 정보 가져오기 1. JDBC를 이용하여 주입(Setter 주입)
										 2. 권한에 대한 정보를 주입하는 Setter -->
	<!-- <bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="jdbcUserService" />
		<property name="authoritiesMapper"	ref="roleHierarchyAuthoritiesMapper" />
		<property name="passwordEncoder" ref="bcryptPasswordEncoder"></property>
	</bean> -->
	
	<!-- <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/> -->

	<!-- mid를 조건으로 사용자 정보를 가져옴 3. mid로 해당 user 검색(username은 여기서 mid),
										인증을 하기 위한 정보
									  4. 권한에 대한 정보를 가져옴(authority:권한, authentication: 인증) -->
	<!-- <security:jdbc-user-service
		id="jdbcUserService" data-source-ref="dataSource"
		users-by-username-query="SELECT mid, mpassword, menabled FROM member WHERE mid=?"
		authorities-by-username-query="SELECT mid, mrole FROM member WHERE mid=?" /> -->
	<!-- 
	<bean id="daoAuthenticationProvider"
        class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
      <property name="userDetailsService" ref="ch17UserDetailsService"/>
      <property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
    </bean> -->

	<!-- 권한 계층 설정
	<bean id="roleHierarchyAuthoritiesMapper"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg ref="roleHierarchyImpl" />
	</bean> -->
	<!-- 권한 설정, >는 더 상위 권한이라는 것
	<bean id="roleHierarchyImpl"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
				ROLE_ADMIN > ROLE_MANAGER
				ROLE_MANAGER > ROLE_USER
			</value>
		</property>
	</bean> -->
	<!-- 
	<bean id="authenticationSuccessHandler" class="com.mycompany.webapp.security.Ch17AuthenticationSuccessHandler">
		<property name="alwaysUseDefaultTargetUrl" value="false"></property>
		<property name="defaultTargetUrl" value="/ch17/content"></property>
	</bean>
	
	<bean id="authenticationFailureHandler" class="com.mycompany.webapp.security.Ch17AuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/ch17/loginForm"></property>
	</bean>
	
	<bean id="logoutSuccessHandler" class="com.mycompany.webapp.security.Ch17LogoutSuccessHandler">
		<property name="defaultTargetUrl" value="/ch17/content"></property>
	</bean> -->
</beans>
